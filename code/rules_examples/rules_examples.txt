
https://firebase.google.com/docs/reference/security/database#operators

==========================================================================================
FROM:

https://firebase.google.com/docs/rules/rules-language#building_conditions
==========================================================================================


A condition is a boolean expression that determines whether a particular operation should be allowed or denied. You can define those conditions in Realtime Database Rules in the following ways.
Pre-defined variables

There are a number of helpful, pre-defined variables that can be accessed inside a rule definition. Here is a brief summary of each:
Predefined Variables
now 	The current time in milliseconds since Linux epoch. This works particularly well for validating timestamps created with the SDK's firebase.database.ServerValue.TIMESTAMP.
root 	A RuleDataSnapshot representing the root path in the Firebase database as it exists before the attempted operation.
newData 	A RuleDataSnapshot representing the data as it would exist after the attempted operation. It includes the new data being written and existing data.
data 	A RuleDataSnapshot representing the data as it existed before the attempted operation.
$ variables 	A wildcard path used to represent ids and dynamic child keys.
auth 	Represents an authenticated user's token payload.

These variables can be used anywhere in your rules. For example, the security rules below ensure that data written to the /foo/ node must be a string less than 100 characters:

{
  "rules": {
    "foo": {
      // /foo is readable by the world
      ".read": true,

      // /foo is writable by the world
      ".write": true,

      // data written to /foo must be a string less than 100 characters
      ".validate": "newData.isString() && newData.val().length < 100"
    }
  }
}

Data-based rules

Any data in your database can be used in your rules. Using the predefined variables root, data, and newData, you can access any path as it would exist before or after a write event.

Consider this example, which allows write operations as long as the value of the /allow_writes/ node is true, the parent node does not have a readOnly flag set, and there is a child named foo in the newly written data:

".write": "root.child('allow_writes').val() === true &&
          !data.parent().child('readOnly').exists() &&
          newData.child('foo').exists()"

Query-based rules

Although you can't use rules as filters, you can limit access to subsets of data by using query parameters in your rules. Use query. expressions in your rules to grant read or write access based on query parameters.

For example, the following query-based rule uses user-based security rules and query-based rules to restrict access to data in the baskets collection to only the shopping baskets the active user owns:

"baskets": {
  ".read": "auth.uid !== null &&
            query.orderByChild === 'owner' &&
            query.equalTo === auth.uid" // restrict basket access to owner of basket
}

The following query, which includes the query parameters in the rule, would succeed:

db.ref("baskets").orderByChild("owner")
                 .equalTo(auth.currentUser.uid)
                 .on("value", cb)                 // Would succeed

However, queries that do not include the parameters in the rule would fail with a PermissionDenied error:

db.ref("baskets").on("value", cb)                 // Would fail with PermissionDenied

You can also use query-based rules to limit how much data a client downloads through read operations.

For example, the following rule limits read access to only the first 1000 results of a query, as ordered by priority:

messages: {
  ".read": "query.orderByKey &&
            query.limitToFirst <= 1000"
}

// Example queries:

db.ref("messages").on("value", cb)                // Would fail with PermissionDenied

db.ref("messages").limitToFirst(1000)
                  .on("value", cb)                // Would succeed (default order by key)

The following query. expressions are available in Realtime Database Security Rules.
Query-based rule expressions
Expression 	Type 	Description
query.orderByKey
query.orderByPriority
query.orderByValue 	boolean 	True for queries ordered by key, priority, or value. False otherwise.
query.orderByChild 	string
null 	Use a string to represent the relative path to a child node. For example, query.orderByChild === "address/zip". If the query isn't ordered by a child node, this value is null.
query.startAt
query.endAt
query.equalTo 	string
number
boolean
null 	Retrieves the bounds of the executing query, or returns null if there is no bound set.
query.limitToFirst
query.limitToLast 	number
null 	Retrieves the limit on the executing query, or returns null if there is no limit set.
Operators

Realtime Database Rules support a number of operators you can use to combine variables in the condition statement. See the full list of operators in the reference documentation.

Creating conditions

Your actual conditions will vary based on the access you want to grant. Rules intentionally offer an enormous degree of flexibility, so your app's rules can ultimately be as simple or as complex as you need them to be.

For some guidance creating simple, production-ready Rules, see Basic Security Rules.


==========================================================================================
FROM:

https://firebase.google.com/docs/database/security/rules-conditions#query-based_rules
==========================================================================================


Query-based Rules

Although you can't use rules as filters, you can limit access to subsets of data by using query parameters in your rules. Use query. expressions in your rules to grant read or write access based on query parameters.

For example, the following query-based rule uses user-based security rules and query-based rules to restrict access to data in the baskets collection to only the shopping baskets the active user owns:

"baskets": {
  ".read": "auth.uid !== null &&
            query.orderByChild === 'owner' &&
            query.equalTo === auth.uid" // restrict basket access to owner of basket
}

The following query, which includes the query parameters in the rule, would succeed:

db.ref("baskets").orderByChild("owner")
                 .equalTo(auth.currentUser.uid)
                 .on("value", cb)                 // Would succeed

However, queries that do not include the parameters in the rule would fail with a PermissionDenied error:

db.ref("baskets").on("value", cb)                 // Would fail with PermissionDenied

You can also use query-based rules to limit how much data a client downloads through read operations.

For example, the following rule limits read access to only the first 1000 results of a query, as ordered by priority:

messages: {
  ".read": "query.orderByKey &&
            query.limitToFirst <= 1000"
}

// Example queries:

db.ref("messages").on("value", cb)                // Would fail with PermissionDenied

db.ref("messages").limitToFirst(1000)
                  .on("value", cb)                // Would succeed (default order by key)

The following query. expressions are available in Realtime Database Security Rules.
Query-based rule expressions
Expression 	Type 	Description
query.orderByKey
query.orderByPriority
query.orderByValue 	boolean 	True for queries ordered by key, priority, or value. False otherwise.
query.orderByChild 	string
null 	Use a string to represent the relative path to a child node. For example, query.orderByChild === "address/zip". If the query isn't ordered by a child node, this value is null.
query.startAt
query.endAt
query.equalTo 	string
number
boolean
null 	Retrieves the bounds of the executing query, or returns null if there is no bound set.
query.limitToFirst
query.limitToLast 	number
null 	Retrieves the limit on the executing query, or returns null if there is no limit set.
Next steps

After this discussion of conditions, you've got a more sophisticated understanding of Rules and are ready to:

Learn how to handle core use cases, and learn the workflow for developing, testing and deploying Rules:

    Learn about the full set of predefined Rules variables you can use to build conditions.
    Write rules that address common scenarios.
    Build on your knowledge by reviewing situations where you must spot and avoid insecure Rules.
    Learn about the Firebase Local Emulator Suite and how you can use it to test Rules.
    Review the methods available for deploying Rules.

Learn Rules features that are specific to Realtime Database:

    Learn how to index your Realtime Database.
    Review the REST API for deploying Rules.


==========================================================================================
FROM:

https://firebase.blog/posts/2018/01/introducing-query-based-security-rules/
==========================================================================================


Introducing Query-based Security Rules
Tom Larkworthy
Tom Larkworthy
Engineer
January 26, 2018

Securing your Firebase Realtime Database just got easier with our newest feature: query-based rules. Query-based rules allow you to limit access to a subset of data. Need to restrict a query to return a maximum of 10 records? Want to ensure users are only retrieving the first 20 records instead of the last 20? Want to let a user query for only their documents? Not a problem. Query-based rules has you covered. Query-based rules can even help you simplify your data structure. Read on to learn how!
The new
query
variable

Security rules come with a set of variables that help you protect your data. For instance, the auth variable tells you if a user is authenticated and who they are, and the now allows you to check against the current server time.

Now, with the query variable, you can restrict read access based on properties of the query being issued.

messages: {
  ".read": "query.orderByKey &&
            query.limitToFirst <= 100"
}

In the example above a client can read the messages location only if they issue an orderByKey() query that limits the dataset to 100 or less. If the client asks for more than 100 messages the read will fail.

The query variable contains additional properties for every type of query combination: orderByKey, orderByChild, orderByValue, orderByPriority, startAt, endAt, equalTo, limitToFirst, and limitToLast. Using a combination of these properties you can restrict your read access to whatever criteria you need. Get the full reference and see more examples in our docs.
Simplifying data structures

Another benefit of query-based rules is that they make it easier to manage a shallow data structure.

In the past you might index your items location by a user’s id.

{
   "items": {
       "user_one": { 
          "item_one": {
             "text": "Query-based, rules!"
          }
       }
    }
}

This structure made it easy to query and restrict item reads on a per-user basis.

{
  "rules": {
    "items": {
      "$uid": {
        ".read": "auth.uid == $uid"
      }
    }
  }
}

This is great because your user’s items are secured, but it requires you to index off of the user’s id, potentially replicating data or complicating your client code.

With query-based rules, you can now get the same security without the nesting!

{
  "rules": {
     "items": {
        ".read": "auth.uid != null &&
                  query.orderByChild == 'uid' &&
                  query.equalTo == auth.uid"
     }
  }
}

The above rule will restrict any read on a per-user basis without indexing by the "uid" key, which means you can write a simple query to retrieve a user’s items without sacrificing security.

Now the data structure is reduced by one level:

{
   "items": {
       "item_one": {
          "text": "Query-based, rules!",
          "uid": "user_one"
       }
    }
}

db.ref("items").orderByChild("uid")
               .equalTo(auth.currentUser.uid)
               .on("value", cb)  

The above query will retrieve all the items belonging to the currently authenticated user. If a user tries to access items that don’t belong to them, the read will fail.
When should I upgrade?

Query expressions are new feature that can be used in parallel with your existing rules. If you find that query expressions can improve your security or simplify your structures you can upgrade to them incrementally.






