(set-logic ALL)

(set-option :produce-models true)
(set-option :incremental true)
(set-option :finite-model-find true)
(set-option :sets-ext true)

(declare-sort Machine 0)

(declare-fun fc (Machine) Real)
(declare-fun ridctr (Machine) Real)
(declare-const maxh Real)

(define-fun human_made ((m1 Machine)) Bool
	(< (fc m1) maxh)
) 

(declare-const all_perceptual_experience Bool)

(define-fun fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> (> (fc m2) (fc m1)) 
		(> (ridctr m2) (ridctr m1)))
) 

(define-fun pe_of_fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> all_perceptual_experience (fc_to_rtr m1 m2))
) 


(assert (forall ((m1 Machine) (m2 Machine)) (pe_of_fc_to_rtr m1 m2)))

(assert (forall ((m1 Machine)) 
			(=> (human_made m1)
				(> (ridctr m1) 0))
        )
)


(echo "fc = functional_complexity")
(echo "maxh = max human made machines fc value")
(echo "ridctr = required_intelligence_design_and_tecnichal_creativity_to_reproduce")
(echo "ASSERTIONS BEFORE")
(get-assertions)
(check-sat)

(push 1)
(assert (not 
        (forall ((m1 Machine) (m2 Machine))
        (=>
                (and    all_perceptual_experience (human_made m1) (> (fc m2) maxh) )
                (> (ridctr m2) (ridctr m1))
        ))
        )
)

(echo "ASSERTIONS AFTER")
(get-assertions)
; (get-assignment)

(check-sat)
; (get-model)

(pop 1)

