(set-logic ALL)

(set-option :produce-models true)
(set-option :incremental true)
(set-option :finite-model-find true)
(set-option :sets-ext true)

(declare-sort Machine 0)

(declare-fun fc (Machine) Real)
(declare-fun ridctr (Machine) Real)

(declare-const minh_fc Real)
(declare-const maxh_fc Real)
(declare-const minnh_fc Real)
(declare-const maxnh_fc Real)
(declare-const minh_rtr Real)

(declare-const A1 Bool)
(declare-const A2 Bool)
(declare-const C1 Bool)

(assert (< 0 minh_fc))
(assert (< minh_fc maxh_fc))
(assert (< maxh_fc minnh_fc))
(assert (< minnh_fc maxnh_fc))

(declare-const all_perceptual_experience Bool)

(define-fun fc_lt ((m1 Machine) (max_fc Real)) Bool
	(< (fc m1) max_fc)
) 

(define-fun fc_eq ((m1 Machine) (m1_fc Real)) Bool
	(= (fc m1) m1_fc)
) 

(define-fun fc_gt ((m1 Machine) (min_fc Real)) Bool
	(> (fc m1) min_fc)
) 

(define-fun rtr_lt ((m1 Machine) (max_rtr Real)) Bool
	(< (ridctr m1) max_rtr)
) 

(define-fun rtr_gt ((m1 Machine) (min_rtr Real)) Bool
	(> (ridctr m1) min_rtr)
) 

(define-fun hm ((m1 Machine)) Bool
	(< (fc m1) maxh_fc)
) 

(define-fun nhm ((m1 Machine)) Bool
	(>= (fc m1) maxh_fc)
) 

(define-fun fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> (> (fc m2) (fc m1)) 
		(> (ridctr m2) (ridctr m1)))
) 

;	(=> (and (fc_eq m1 m1_fc) (< m1_fc fc2))
;		(> (ridctr m1) min_rtr))

(define-fun rel_fc_to_rtr ((m1 Machine) (min_fc Real) (max_fc Real) (min_rtr Real)) Bool
	(=> (and (fc_gt m1 min_fc) (fc_lt m1 max_fc))
		(> (ridctr m1) min_rtr))
) 

(define-fun pe_of_fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> all_perceptual_experience (fc_to_rtr m1 m2))
) 

(define-fun hm_pe_of_fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> (and (hm m1) (hm m2)) (pe_of_fc_to_rtr m1 m2))
) 

(define-fun hm_fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> (and (hm m1) (hm m2)) (fc_to_rtr m1 m2))
) 

(define-fun nhm_fc_to_rtr ((m1 Machine) (m2 Machine)) Bool
	(=> (and (nhm m1) (nhm m2)) (fc_to_rtr m1 m2))
) 

(assert (forall ((m1 Machine)) (rel_fc_to_rtr m1 minh_fc maxh_fc minh_rtr)))

(assert (forall ((m1 Machine) (m2 Machine)) (hm_fc_to_rtr m1 m2)))

(assert (forall ((m1 Machine) (m2 Machine)) 
			(=> (hm_fc_to_rtr m1 m2)
				(nhm_fc_to_rtr m1 m2)
			)
		)
)

(echo "fc = functional_complexity")
(echo "maxh_fc = max human made machines fc value")
(echo "ridctr = required_intelligence_design_and_tecnichal_creativity_to_reproduce")
(echo "ASSERTIONS BEFORE")
(get-assertions)
(check-sat)

(push 1)

;	(=> (and A1 A2) C1)
;	(=> (and (not A1) (not A2)) C1)


;(assert (not (or A1 (not A1))	))


(assert (not 
		(forall ((m1 Machine)) (rel_fc_to_rtr m1 maxh_fc maxnh_fc minh_rtr))
;		(or A1 (not A1))
;		(forall ((m1 Machine) (m2 Machine)) (fc_to_rtr m1 m2) )
	)
)

;(assert (not (forall ((m1 Machine)) (or (hm m1) (nhm m1)))	))

(echo "ASSERTIONS AFTER")
(get-assertions)
; (get-assignment)

(check-sat)
; (get-model)

(pop 1)

